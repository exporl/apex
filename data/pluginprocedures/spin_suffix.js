/* exported getTrials, getDatablocks, getStimuli */
/* global xml, speechmaterial, targetlist, targetscreen */

// Will be appended to spin.js generated by SPIN interface
var prefix = speechmaterial.name + '_';
var boolMatrix = (speechmaterial.name === "VlMatrix");
var parameter;
var parameters;
var nParameters;
var parameterID;
var parameterIDs = ["speechtokenText","speechtokenPart1","speechtokenPart2","speechtokenPart3","speechtokenPart4","speechtokenPart5","speechtokenPart6","speechtokenPart7","speechtokenPart8","speechtokenPart9"];
var nParameterIDs = parameterIDs.length;
var nSpeechtokenParts;
var xmlParameters;

function getStimuli() {
    var r = "";
	
	// create a stimulus for each speech token
    for (var i = 0; i < speechmaterial[targetlist].length; ++i) {
		xmlParameters = "";
        parameters = [speechmaterial[targetlist][i].text];

        if (boolMatrix) // TO DO: something similar for keywords of list, phonemes of nva, ...
            parameters = parameters.concat(speechmaterial[targetlist][i].text.split(" "));
        nParameters = parameters.length;
        nSpeechtokenParts = parameters.length-1;

        for (var iParameterID = 0; iParameterID < nParameterIDs; iParameterID++) {
            parameterID = parameterIDs[iParameterID];

            if (iParameterID < nParameters)
                parameter = parameters[iParameterID];
            else
                parameter = "";

            xmlParameters = xmlParameters + xml.tag("parameter", {"id" : parameterID},parameter);
        }
        xmlParameters = xmlParameters + xml.tag("parameter", {"id" : "nSpeechtokenParts"},nSpeechtokenParts);

        r = r +
            xml.tag(
                "stimulus",
                {
                  "id" : "stimulus_" + prefix + speechmaterial[targetlist][i].id
                },
                xml.tag(
                    "datablocks", xml.tag("sequential", xml.tag("datablock", {
                        "id" : "datablock_silence"
                    }) + xml.tag("datablock", {
                        "id" : "datablock_" + prefix +
                                   speechmaterial[targetlist][i].id
                    }) + xml.tag("datablock", {"id" : "datablock_silence"}))) +
                    xml.tag("fixedParameters",
                            xmlParameters));
    }
    return r;
}

function getDatablocks() {
    var r = "";
	
	// create a datablock for each speech token
    for (var i = 0; i < speechmaterial[targetlist].length; ++i) {
        r = r +
            xml.datablock("datablock_" + prefix +
                              speechmaterial[targetlist][i].id,
                          "soundcard", speechmaterial[targetlist][i].uri);
    }
    return r;
}

function getTrials() {
    var r = "";
    for (var i = 0; i < speechmaterial[targetlist].length; ++i) {
        r = r +
            xml.trial(
                "trial_" + prefix + speechmaterial[targetlist][i].id,
                targetscreen, xml.tag("stimulus", {
                    id : "stimulus_" + prefix + speechmaterial[targetlist][i].id
                }),
                "correct");
    }
    return r;
}
