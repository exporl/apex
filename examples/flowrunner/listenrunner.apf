<!-- @doc
     @what: HTML file for listen flow runner

     @description: A flow runner allows to chain multiple experiments together.
     The listen flow runner allows users to specify the desired experiments and
     transitions between them in a straightforward json format

     @how: The variable 'runner' specifies the flow. It contains -most importantly-
     an array experiments, which defines the apx files to be contained in the runner,
     the transitions between them and the starting options. Transitions can depend
     on custom variables, most of which are extracted from the results of the
     previous experiment. In order to use result processing functions the runner
     depends on resultsprocessor.js
  -->
<html>
  <head>
    <title>Listen flow runner</title>

    <!-- fix initial scaling-->
    <script src="external/jquery-1.11.1.min.js"></script>
    <script src="external/jquery.mobile-1.4.5.min.js"></script>
    <meta name="viewport" content="width=device-width">

    <!-- (optional) stylesheet with modern UI/Apex look -->
    <link rel="stylesheet" href="external/themes/apex-theme.min.css" />
    <link rel="stylesheet" href="external/themes/jquery.mobile.icons.min.css" />
    <link rel="stylesheet" href="external/themes/jquery.mobile.structure-1.4.5.min.css" />

    <!-- (necessary) communication with Apex -->
    <script src="js/polyfill.js" type="text/javascript"> </script>
    <script src="js/commonwebsocket.js" type="text/javascript"> </script>
    <script src="js/flowapi.js" type="text/javascript"> </script>
    <script src="js/resultsprocessor.js" type="text/javascript"> </script>

    <!-- (necessary) improved Javascript functionality -->
    <script src="external/jquery-1.11.1.min.js"></script>
    <!-- (optional) cross-platform UI functionality -->
    <script src="external/jquery.mobile-1.4.5.min.js"></script>

    <script>

/* eslint-disable no-unused-vars, no-undef */

/**
 * File for specifying the listen flow runner.
 *
 * The runner object determines the flow:
 * it represents the nodes and the edges of the flow graph.
 *
 * After each experiment, the flow runner opens and shows the transition options.
 * If a transition has a condition value, the condition needs to be met for
 * that option to appear.
 *
 * You can also define custom conditions using Javascript code.
 * The following Javascript syntax in particular may be usefull when defining transitions:
 *
 * || logical OR operator, can be used if one of two transitions should be satisfied
 *      e.g. function(){return percCorrect(50) || trialsDone(5)}
 *          at least 50% of the trials were correct, or at least 5 trials were completed.
 * && logical AND operator, used in the same way as OR
 * ! logical NOT operator, can be used to negate a condition
 *      e.g. function(){return !percCorrect(50) && totalTimeExceeds(120)}
 *          less than 50% of the trials were correct and
 *          at least 2 minutes were spent in the flowrunner
 *
 * Default transition condition functions include:
 *
 * percCorrect(num)
 *      At least num % of the previous trials were answered correctly
 * trialsDone(num)
 *      At least num trials were completed in the previous experiment
 * trialsCorrect(num)
 *      At least num trials were answered correctly.
 * reversalsDone(num)
 *      At least num reversals occured in the previous experiment
 * totalTimeExceeds(num)
 *      At least num seconds were spent doing experiments in this flowrunner
 * timeTodayExceeds(num)
 *      At least num seconds were spend doing experiments today
 * timeLastExperimentExceeds(num)
 *      At least num seconds were spend in last experiment
 * meanOverRevs(num, revs)
 *      The mean parameter value over the last 'revs' reversals is at least num
 *      (Similar functions will revert to false if not enough data is available)
 * meanOverTrials(num, trials)
 *      The mean parameter value over the last 'trials' trials is at least num
 * meanOverRevsImprovedBy(num, revs)
 *      The mean parameter value increased by at least num since the last time
 *      (Will return false if there is no previous experiment to work with)
 *      (Will not check if parameter values have different units)
 * meanOverTrialsImprovedBy(num, trials)
 *      Idem, but takes the mean over 'trials' trials in stead of reversals
 * matrixValue(num, x, y)
 *      The matrix value from the previous result at row x and column y
 *      is at least num
 */

function configure(absoluteFilePath) {
 
runner = {
    //general settings
    saveFile: "lrSave.json",

    experimentPrefix: "apx/",
    resultsFolder: absoluteFilePath + "/results/",
    experimentExtension: ".apx",
    start: [
        "SampleExp01"
    ],

    runImmediatelyWhenSingleTransition: false,
    autoSaveExperiments: true,
    introMessage: "Welcome to the Listen runner! Press the button to get started.",
    instructionMessage: "Choose next experiment:",
    outroMessage: "All done!",

    //state variables
    transitions: [],
    previousExperiments: [],
    previousResults: [], // TODO: remove, this is redundant
    results: []
};

var conditions = conditionsFactory(runner.results);

runner.experiments = [
        {
            name: "SampleExp01",
            transitions: [
                {name: "SampleExp04",
                    condition: conditions.timeLastExperimentExceeds(5)},
                {name: "SampleExp05",
                    condition: "never"},
                {name: "SampleExp06"}
            ]
        },
        {
            name: "SampleExp02",
            transitions: [
                {name: "SampleExp05",
                    condition: function(){return trialsDone(2)}},
                {name: "SampleExp06",
                    condition: myCustomCondition}
            ]
        },
        {
            name: "SampleExp03",
            transitions: [
                {name: "SampleExp06"}
            ]
        },
        {
            name: "SampleExp04"
        },
        {
            name: "SampleExp05"
        },
        {
            name: "SampleExp06"
        }
    ];

};
// ------------- Additional transition condition functions -------------

function myCustomCondition(){
    var meanSatisfied = meanOverTrials(1,2);
    var minTrials = trialsDone(2);
    var everythingCorrect = percCorrect(100);

    return (meanSatisfied && minTrials) || everythingCorrect;
}

// ------------- Listen runner internal workings -------------

//initialize on api check, recursively repeat until ready.
function apicheck() {
    if (typeof api !== "undefined")
        api.onReady(init);
    else
        setTimeout(apicheck, 100);
}

//check api as soon as document is loaded
$(document).ready(function(){
    setTimeout(apicheck, 100);
});

//initialize listen flow runner
function init() {
    //load button should be hidden by default
    $("#loadButton").hide();

    api.absoluteFilePath("").then(function(absoluteFilePath) {
        savePath = absoluteFilePath + "/";
        api.loadScript("./listenrunner.js").then(function() {
            configure(absoluteFilePath);
            setStart();
        });
    });
}

    </script>
  </head>
  <body>
    <button onClick="setLoadedState()" id="loadButton">Continue</button>
    <div class="container">
      <!-- Place to put next experiment buttons -->
    </div>
  </body>
</html>

